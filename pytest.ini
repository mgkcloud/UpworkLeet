[pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test output configuration
console_output_style = progress
addopts = 
    --verbose
    --color=yes
    --capture=no
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --no-cov-on-fail

# Custom markers
markers =
    integration: marks tests as integration tests
    slow: marks tests as slow (deselect with '-m "not slow"')
    api: marks tests that require API access

# Environment variables for testing
env =
    UPWORK_SEARCH_QUERY=test query
    FREELANCER_PROFILE_PATH=tests/test_data/test_profile.md
    POLL_INTERVAL_SECONDS=1
    MAX_JOBS_PER_POLL=2
    JOB_RETENTION_DAYS=1

# Temporary directories
cache_dir = .pytest_cache
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# Coverage configuration
[coverage:run]
source = src
omit = 
    tests/*
    */__init__.py
    src/prompts.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except Exception as e:
    def main

[coverage:html]
directory = coverage_html
